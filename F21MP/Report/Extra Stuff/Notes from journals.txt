references: 
- Youtube for tutorials
- Google for colour palettes and logos
- ChatGPT for brainstorming colour, design and also report layout
- F21RP report for requirements
- F21AD notes on personas, scenarios, and design principles
- Canvas, Google for design inspiration
- node js documentation for the router thingy and reCAPTCHA. ReCAPTCHA not working
- react documentation for creating the next application from console and powershell
- ethihad airways for help page
- Animated Underline Hover Effect https://codepen.io/hariz_ms/pen/xxzprgy: For getting the hover effect
- https://prateeksurana.me/blog/integrating-recaptcha-with-next/: For reCAPTCHA
- https://forum.freecodecamp.org/t/radio-buttons-in-a-group/517481/10: For radio buttons
- https://www.reddit.com/r/neocities/comments/1bxeueu/how_to_keep_sidebars_from_overlapping_main/: For fixing the menu overlapping problem (solution: flexbox)
- https://nextjs.org/docs/messages/next-router-not-mounted: For fixing errors
- https://www.newline.co/fullstack-react/assets/media/sGEMe/MNzue/30-days-of-react-ebook-fullstackio.pdf: react pdf tutorial
- https://stackoverflow.com/questions/75734651/how-to-center-a-div-in-html: div alignment
- Build a Kanban Board in React https://www.youtube.com/watch?v=SJTazZUQVDE&t=429s: A Step-by-Step Tutorial - YouTube: for kanban board
- Documentation, Reddit, ChatGPT, and stackoverflow: Help with coding and debugging
- LTDI pdf (Canvas): To get information about evaluation and system log data (screen recording for testing) page 62 
- https://marker.io/blog/usability-testing-template#website-homepage-usability-template: For usability testing documents like questionnaire and task sheets
- https://testfort.com/blog/why-your-project-needs-ui-ux-testing: testing checklists
- https://medium.com/@userfocus/the-1-page-usability-test-plan-dbc8c3d7fb54: usability plan template



Tools used:
- Google fonts and Dafont to get fonts
- FigmaAgent for installing fonts
- Lunapic for image editing
- https://thispersondoesnotexist.com/ for images for personas
- Google reCAPTCHA
- https://www.freeconvert.com/png-to-ico/download: To get favicon (png to ico)
- MySQL Workbench: Creating database and ERD
- Microsoft forms: To create SUS
- Ms Word: Developing the testing documents
- Vs Code: For programming
- Google Chrome: For viewing the website
- Command prompt/PowerShell: For installing libraries
- Snipping tool: To screen record
- Outlook: Contacting staff members for testing


Supervisor:
- replace calendar with timeline
- make the courses a tab instead of having a separate button. The dashboard was cluttered with buttons to view the coursework. the supervisor suggested to instead make the tab clickable so that the button is not needed
- Replace name pronunciation with preferred name
- Replace task with subtask
- Mention that the deadline is for the subtask
- Subtask can only be viewed and not edited
- Add delete option for coursework (staff)
- When adding a coursework, the system should ask for the number for independent and dependent subtasks
- Dependent or sequential subtasks will have prerequisites
- The weight will be added by the lecturer and only visible to them
- staff - the lecturer can release the class performance to students so that they can see how many students have completed
- The dashboard should show the students who have zero submissions
- Change logo
- When the subtasks on the timeline are clicked, a movable popup should appear with subtask details
- For staff, add instructions or a guide about adding coursework and how it cannot be edited later
- The prerequisite for subtask 1 will be the lecture material of week 3
- Add a “view timeline” button after the coursework is added to see the updated timeline
- The lecturer should be able to reorder the subtasks and delete them during the adding process. the supervisor asked for the subtasks to be reordered and also to not allow editing of coursework and only deletion
- Do not depend on GitHub because it can crash. Mention in report
- Keep the colours of the courses same (timeline and dashboard), make the dashboard coursework colour light grey and only the border colour different
- coursework progress bar colour does not match with a darker shade of the tabs
- competitor application coursework (heading must mention that it is a coursework)
- board renamed progress board
- Students only focus on deadlines not on the process. this tool will help them in work life since it is a mix of lms with project management tool (kanban)
- Justify and reflect how your tool evolved
- Make the borders thicker for the student dashboard boxes
- Leave the sharing part
- Add all students in one course
- 5 professors
- Supervisor will set me up with 4th year undergraduate students attending a lecture on Monday, 21st of October at 5 PM. Testing might continue the next day if I don’t get enough participants on the first day
- Outline for the progress bar, call it work progress, and show the percentage on the bar
- Remove bar from view coursework
- Guide students only to functional pages
- Don’t keep more than 3 open-ended questions
- Shift questions to Likert scale
- It was difficult and I regret not starting earlier but this is what my projects aims to change
- Hardcoding exists but my focus is on delivering a usable design incorporated with time and project management functionalities to help students with their academics and prepare them for their professional lives
- Decided to not make any change in the forget password section
- Also, because the staff portal is hardcoded, this is also a reason that they will not test it because most of it is not dynamic
- progress bar image: origina picture for inspirtation in appendix
- requirements: what changes were made and why (chapter 3). include original. how i went back and changed them. 
- take text from industrial development thing RP
- role of client played by the supervisor
- sprint: good learning experinece, made mistakes after sprint image. reflection
- personas: what they are, role of personas, describe them, how it guided me, add in appendix (refer to it for role of...)
- no code snippets
- assumptions in implementation and limitation in conclusions (separate them) (dont belong together)
- unit testing and what i did, not more than one sentence (same for integration testing).
- give only one or two sentences on intro of subject and then jump into what was done
- no need to compare the final project with the objectives set.
- add the future work document thingy in conclusion. conclusion will refelect in genereal, what went good, and what went bad, summarise challenges and highligh high bits about it
future work: where do you go from here. couple of lines. run this pilot for one semester. one lecturer adopts this for one semester. To see in action instead of just 20 mins. 







- weightage was not used
- locked subtasks are disabled and have a lock emoji on it
- task description not clear for student testing
- (total submissions / total unlocked subtasks) * 100 
- if done, green otherwise red/orange
- stars for submission
- next subtask deadline on dashboard and each course page
- students filtering problem
- different emojis for completion percentage
- colour coded on students list with sorting 
- size issue when transitioned from prototype to actal website because the template size on figma was incorrect. the actual website has more width and less height. this was good for the timeline as it all fits
- There were problems with the student menu about it not highlighting contact us when selected but the page was laoding. Fixed that. After fixing the above issue, the links for account and courses was set to null. But this gave router error so had to add an if statement to prevent null links
- timeline worked after CSS STYLING HAD TO BE FLEX AND ABSOLUTE. took 4 days
- removed locked subtasks from Kanban because it was not working and made it too complex. so, they will only be displayed once unlocked
- forget password thing is not functional. just hard code




IMP FEEDBACK FROM SECOND READER AND SUPERVISOR
bit of the lit is not relevant to the project.
a clearer diagram or table illustrating the project scope in a step-by-step fashion could have added further clarity and potentially earned additional marks. (requirements chapter and methodology)
project plan: The project requirements lack realistic task breakdowns and timelines. Creating a system prototype in just a couple of days seems unlikely.
For the F21MP dissertation, you need to re-focus the lit review from a Usability perspective, check the annotations on the PDF.


Abstract describes the project, but the dissertation abstract should describe the document. Does the introduction identifies a meaningful problem and the tool to solve the problem of students meeting dissertation deadlines. A more detailed description of what is being proposed could have been beneficial.
LR: often the presentation is too lengthy with little reflection on the link to the proposed work.
Where the work is slightly deficient is in critiquing what is reviewed and establishing a link to the proposed work. could include images for illustration
Agile Solo is identified, but not elaborated
The main dissertation will need to include diagrams and figures that have not been considered at this stage.


things to check before final submission:
turn ze to se, zation to sation
revise the abbreviation list
don't touch the bibliography at all
refresh the references
check the appendix and its reference in main body
appendices